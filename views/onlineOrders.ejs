<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Online Orders - Payment Reception</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap');
    body {
      font-family: 'Poppins', sans-serif;
      background-color: #fff;
    }
    @media (max-width: 640px) {
      table { font-size: 0.875rem; }
    }
    .modal-overlay {
      position: fixed;
      inset: 0;
      background: rgba(0, 0, 0, 0.5);
      display: none;
      align-items: center;
      justify-content: center;
      z-index: 50;
    }
  </style>
</head>
<body class="bg-gray-50">
  <div class="flex min-h-screen">
    <!-- Sidebar -->
    <aside class="w-64 bg-white border-r shadow flex flex-col">
      <div class="p-6">
        <h2 class="text-2xl font-bold text-green-600">Canteen Logo</h2>
      </div>
      <nav class="flex-1">
        <ul>
          <li><a href="/dashboard" class="block py-3 px-6 hover:bg-gray-50">Home</a></li>
          <li><a href="/orders/list" class="block py-3 px-6 hover:bg-gray-50">Order List</a></li>
          <li><a href="/orders/online" class="block py-3 px-6 text-green-600 font-semibold">Online Orders</a></li>
          <li><a href="/dashboard/manage-items" class="block py-3 px-6 hover:bg-gray-50">Manage Items</a></li>
          <li><a href="/dashboard/settings" class="block py-3 px-6 hover:bg-gray-50">Settings</a></li>
        </ul>
      </nav>
      <div class="p-6 border-t">
        <div class="flex items-center">
          <span class="ml-3 text-green-600 font-semibold"><%= user.username %></span>
          <a href="/dashboard/logout" class="ml-auto text-red-500 hover:underline">Logout</a>
        </div>
      </div>
    </aside>

    <!-- Main Content -->
    <div class="flex-1 p-6">
      <h1 class="text-3xl font-bold text-green-600 mb-6 text-center">Online Orders</h1>
      <table class="min-w-full bg-white rounded-lg shadow overflow-hidden">
        <thead class="bg-green-500 text-white">
          <tr>
            <th class="py-3 px-4">Ref Number</th>
            <th class="py-3 px-4">Order ID</th>
            <th class="py-3 px-4">Customer</th>
            <th class="py-3 px-4">Mobile</th>
            <th class="py-3 px-4">Total (₹)</th>
            <th class="py-3 px-4">Status</th>
            <th class="py-3 px-4">Action</th>
          </tr>
        </thead>
        <tbody>
          <% orders.forEach(order => { %>
          <tr class="border-b">
            <td class="py-2 px-4 text-center font-semibold"><%= order.orderNumber %></td>
            <td class="py-2 px-4 text-center"><%= order.orderId %></td>
            <td class="py-2 px-4"><%= order.customerName %></td>
            <td class="py-2 px-4"><%= order.mobile %></td>
            <td class="py-2 px-4 text-right font-semibold">₹<%= order.totalAmount.toFixed(2) %></td>
            <td class="py-2 px-4 text-center"><%= order.status %></td>
            <td class="py-2 px-4 text-center">
              <% if (order.status === "Pending") { %>
                <button onclick="openPaymentModal('<%= order.orderId %>', <%= order.totalAmount %>)"
                        class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded">
                  Continue Order
                </button>
              <% } else { %>
                <span class="text-green-600 font-bold">Paid</span>
              <% } %>
            </td>
          </tr>
          <tr class="bg-gray-50">
            <td colspan="7" class="py-2 px-4">
              <strong>Items:</strong>
              <ul class="list-disc list-inside">
                <% order.items.forEach(item => { %>
                  <li><%= item.foodItem?.name || "Item" %> — Qty: <%= item.quantity %></li>
                <% }) %>
              </ul>
            </td>
          </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
  </div>

  <!-- Payment Modal -->
  <div id="paymentModal" class="modal-overlay" role="dialog" aria-modal="true" tabindex="-1">
    <div class="bg-white p-6 rounded shadow-lg max-w-md w-full">
      <h2 class="text-xl font-bold mb-4">Continue Order Payment</h2>
      <p id="orderInfo" class="mb-4"></p>

      <div class="mb-4">
        <label class="inline-flex items-center mr-4">
          <input type="radio" name="paymentMode" value="Cash" class="form-radio" checked>
          <span class="ml-2">Cash</span>
        </label>
        <label class="inline-flex items-center">
          <input type="radio" name="paymentMode" value="UPI" class="form-radio">
          <span class="ml-2">UPI</span>
        </label>
      </div>

      <div id="upiSection" class="mb-4 hidden">
        <p class="mb-2">Scan this QR to pay via UPI:</p>
        <img id="upiQr" src="" alt="UPI QR Code" class="mx-auto mb-2" />
      </div>

      <div class="flex justify-end">
        <button onclick="cancelOrder()" class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded mr-2">
          Cancel
        </button>
        <button id="actionButton" onclick="handleAction()"
                class="bg-green-500 hover:bg-green-600 text-white px-3 py-1 rounded">
          Proceed
        </button>
      </div>
      <div class="mt-4 text-right">
        <button onclick="closeModal()" class="text-gray-500 hover:underline">Close</button>
      </div>
    </div>
  </div>

  <script>
    let currentOrderId = "";
    let currentAmount = 0;
    const activeUpiId = "<%= (activeUpi && activeUpi.upiId) || '' %>";

    function openPaymentModal(orderId, amount) {
      currentOrderId = orderId;
      currentAmount = amount;
      document.getElementById('orderInfo').innerText =
        `Order ID: ${orderId} | Amount: ₹${amount.toFixed(2)}`;
      // reset
      document.querySelector('input[name="paymentMode"][value="Cash"]').checked = true;
      document.getElementById('upiSection').classList.add('hidden');
      document.getElementById('upiQr').src = "";
      document.getElementById('actionButton').innerText = "Proceed";
      document.getElementById('paymentModal').style.display = "flex";
    }

    function closeModal() {
      document.getElementById('paymentModal').style.display = "none";
    }

    async function initiateUpiTransaction() {
      if (!activeUpiId) {
        alert("Error: No active UPI ID configured.");
        return false;
      }
      try {
        const res = await fetch("/orders/initiate-upi", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            orderId: currentOrderId,
            amount: currentAmount,
            upiId: activeUpiId
          })
        });
        const data = await res.json();
        if (data.success && data.qrCode) {
          // data.qrCode is the base64 string saved in DB
          document.getElementById('upiQr').src = `data:image/png;base64,${data.qrCode}`;
          return true;
        } else {
          alert("UPI initiation failed: " + (data.message || "unknown error"));
          return false;
        }
      } catch (e) {
        console.error(e);
        alert("Network error initiating UPI.");
        return false;
      }
    }

    function completeOrder() {
      const paymentMode = document.querySelector('input[name="paymentMode"]:checked').value;
      const payload = { orderId: currentOrderId, paymentMode };
      if (paymentMode === "UPI") payload.upiId = activeUpiId;

      fetch("/orders/complete-payment", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
      })
      .then(r => r.json())
      .then(res => {
        if (res.success) {
          alert(`Order ${currentOrderId} marked as Paid.`);
          closeModal();
          location.reload();
        } else {
          alert("Error: " + res.message);
        }
      })
      .catch(err => {
        console.error(err);
        alert("Error completing order.");
      });
    }

    function cancelOrder() {
      if (!confirm(`Cancel Order ${currentOrderId}?`)) return;
      fetch(`/orders/delete/${currentOrderId}`, { method: "DELETE" })
        .then(r => r.json())
        .then(res => {
          if (res.success) {
            alert(`Order ${currentOrderId} cancelled.`);
            closeModal();
            location.reload();
          } else {
            alert("Error: " + res.message);
          }
        })
        .catch(err => {
          console.error(err);
          alert("Error cancelling order.");
        });
    }

    async function handleAction() {
      const mode = document.querySelector('input[name="paymentMode"]:checked').value;
      if (mode === "Cash") {
        completeOrder();
      } else {
        const upiSection = document.getElementById('upiSection');
        if (upiSection.classList.contains('hidden')) {
          // first click: generate & display QR
          const ok = await initiateUpiTransaction();
          if (!ok) return;
          upiSection.classList.remove('hidden');
          document.getElementById('actionButton').innerText = "Complete Order";
        } else {
          // second click: finalize payment
          completeOrder();
        }
      }
    }
  </script>
</body>
</html>
